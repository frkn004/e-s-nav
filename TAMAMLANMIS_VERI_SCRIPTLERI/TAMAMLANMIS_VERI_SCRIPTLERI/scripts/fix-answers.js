import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Bilinen doƒüru cevaplar - manuel kontrol edilmi≈ü
const correctAnswers = {
  // Hƒ±z sƒ±nƒ±rlarƒ± 
  "Yerle≈üim yeri i√ßindeki azami hƒ±zƒ±": 0, // A) 50
  "Otoyolda azami hƒ±zƒ±": 2, // C) 120
  "≈ûehirlerarasƒ± karayolunda azami hƒ±zƒ±": 1, // B) 90
  
  // Park kurallarƒ±
  "park edildikten sonra": 1, // B) El frenini √ßekmek
  "el freni": 1, // B) El frenini √ßekmek
  
  // Takip mesafesi
  "2 saniyede gideceƒüi yol": 0, // A) Takip mesafesi
  "takip mesafesi": 0, // A) Takip mesafesi
  
  // ƒ∞lk yardƒ±m
  "ABC kuralƒ±": 0, // A) Havayolu, nefes, kalp
  "turnike uygulanƒ±r": 3, // D) Atardamar ge√ßen tek kemikli b√∂lge
  "Solunum durmasƒ±nda": 1, // B) Oksijensizlik
  
  // Motor bilgisi
  "motorun tam g√º√ß": 0, // A) Soƒüutma sistemi
  "motor yaƒüƒ± kontrol√º": 0, // A) Seviye √ßubuƒüu ile
  
  // Emniyet kemeri
  "emniyet kemeri": 0, // A) Trafik kazalarƒ±nda koruyucu √∂nlem
  
  // √áevre
  "√ßevrenin temiz kalmasƒ±": 3 // D) Ara√ß bakƒ±mlarƒ±nƒ± zamanƒ±nda yaptƒ±rmak
};

async function main() {
  console.log('üîß Doƒüru cevaplar d√ºzeltiliyor...');

  try {
    let updatedCount = 0;

    // T√ºm sorularƒ± al
    const questions = await prisma.soru.findMany({
      where: { firmaId: null }
    });

    for (const question of questions) {
      const questionText = question.soru.toLowerCase();
      
      // Anahtar kelimelerle e≈üle≈ütir
      for (const [keyword, correctIndex] of Object.entries(correctAnswers)) {
        if (questionText.includes(keyword.toLowerCase())) {
          // Doƒüru cevabƒ± g√ºncelle
          await prisma.soru.update({
            where: { id: question.id },
            data: { dogruCevap: correctIndex }
          });
          
          console.log(`‚úÖ Soru g√ºncellendi: "${question.soru.substring(0, 50)}..." -> Cevap: ${String.fromCharCode(65 + correctIndex)}`);
          updatedCount++;
          break;
        }
      }
    }

    console.log(`\nüéâ ${updatedCount} sorunun doƒüru cevabƒ± g√ºncellendi!`);

    // √ñrneklem kontrol
    const sampleQuestions = await prisma.soru.findMany({
      where: { 
        firmaId: null,
        soru: { contains: 'hƒ±z' }
      },
      take: 3
    });

    console.log('\nüìù √ñrnek g√ºncellenen sorular:');
    sampleQuestions.forEach(q => {
      console.log(`   Soru: ${q.soru.substring(0, 60)}...`);
      console.log(`   Doƒüru: ${String.fromCharCode(65 + q.dogruCevap)} - ${q.cevaplar[q.dogruCevap]}`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå Hata:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main(); 