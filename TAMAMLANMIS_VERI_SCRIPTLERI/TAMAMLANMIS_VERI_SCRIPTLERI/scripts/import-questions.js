import { PrismaClient, Kategori, Zorluk } from '@prisma/client';
import fs from 'fs/promises';
import path from 'path';

const prisma = new PrismaClient();

// Kategori mapping
const categoryMapping = {
  'TRAFƒ∞K KURALLARI': 'TRAFIK',
  'TRAFƒ∞K ƒ∞≈ûARETLERƒ∞': 'TRAFIK', 
  'ARA√á TEKNƒ∞ƒûƒ∞': 'MOTOR',
  'MOTOR VE ARA√á Bƒ∞LGƒ∞Sƒ∞': 'MOTOR',
  'ƒ∞LK YARDIM': 'ILK_YARDIM',
  'S√úR√úC√ú PSƒ∞KOLOJƒ∞Sƒ∞': 'TRAFIK',
  '√áEVRE VE G√úVENLƒ∞K': 'TRAFIK'
};

// Zorluk mapping
const difficultyMapping = {
  'Kolay': 'KOLAY',
  'Orta': 'ORTA', 
  'Zor': 'ZOR'
};

async function main() {
  console.log('üöÄ Sorular veritabanƒ±na y√ºkleniyor...');

  try {
    // JSON dosyasƒ±nƒ± oku
    const questionsPath = path.join(process.cwd(), 'database', 'questions_by_category.json');
    const questionsData = await fs.readFile(questionsPath, 'utf-8');
    const questionsByCategory = JSON.parse(questionsData);

    // Mevcut sorularƒ± temizle (sadece genel sorular, firma √∂zel olanlarƒ± koru)
    await prisma.soru.deleteMany({
      where: {
        firmaId: null // Sadece genel sorularƒ± sil
      }
    });

    console.log('‚úÖ Mevcut genel sorular temizlendi');

    let totalImported = 0;
    let skippedCount = 0;

    // Her kategori i√ßin sorularƒ± i≈üle
    for (const [categoryName, questions] of Object.entries(questionsByCategory)) {
      console.log(`\nüìù ${categoryName} kategorisi i≈üleniyor... (${questions.length} soru)`);

      // Kategoriyi map et
      const mappedCategory = categoryMapping[categoryName] || 'TRAFIK';
      
      for (const question of questions) {
        try {
          // Bo≈ü se√ßenekli sorularƒ± atla
          const options = Object.values(question.options).filter(opt => opt && opt.trim() !== '');
          if (options.length < 2) {
            skippedCount++;
            console.log(`‚ö†Ô∏è  Soru ${question.id} atlandƒ±: Yetersiz se√ßenek`);
            continue;
          }

          // Se√ßenekleri array'e √ßevir (4 se√ßenek olmasƒ± i√ßin)
          const cevaplar = [
            question.options.A || 'Se√ßenek A',
            question.options.B || 'Se√ßenek B', 
            question.options.C || 'Se√ßenek C',
            question.options.D || 'Se√ßenek D'
          ];

          // Doƒüru cevabƒ± tahmin et (genelde A=0, B=1, C=2, D=3)
          // Bu kƒ±sƒ±mda manuel olarak doƒüru cevap belirlememiz gerekebilir
          // ≈ûimdilik rastgele atayalƒ±m, sonra d√ºzeltiriz
          const dogruCevap = Math.floor(Math.random() * options.length);

          // Zorluk seviyesini map et
          const difficulty = question.classification?.difficulty || 'Orta';
          const mappedDifficulty = difficultyMapping[difficulty] || 'ORTA';

          // Premium i√ßerik belirleme (zor sorular premium yapƒ±labilir)
          const premiumIcerik = mappedDifficulty === 'ZOR' || question.hasImage;

          // Veritabanƒ±na ekle
          await prisma.soru.create({
            data: {
              firmaId: null, // Genel soru
              soru: question.text,
              cevaplar: cevaplar,
              dogruCevap: dogruCevap,
              kategori: mappedCategory,
              zorluk: mappedDifficulty,
              premiumIcerik: premiumIcerik,
              embedding: [], // Vector embedding i√ßin bo≈ü
              aktif: true
            }
          });

          totalImported++;

          if (totalImported % 50 === 0) {
            console.log(`   üìä ${totalImported} soru y√ºklendi...`);
          }

        } catch (error) {
          console.error(`‚ùå Soru ${question.id} y√ºklenemedi:`, error.message);
          skippedCount++;
        }
      }
    }

    // ƒ∞statistikleri g√∂ster
    const stats = await prisma.soru.groupBy({
      by: ['kategori'],
      _count: { kategori: true },
      where: { firmaId: null, aktif: true }
    });

    console.log('\nüéâ Sorular ba≈üarƒ±yla y√ºklendi!');
    console.log(`üìä Toplam y√ºklenen: ${totalImported} soru`);
    console.log(`‚ö†Ô∏è  Atlanan: ${skippedCount} soru`);
    console.log('\nüìã Kategori daƒüƒ±lƒ±mƒ±:');
    
    stats.forEach(stat => {
      console.log(`   ${stat.kategori}: ${stat._count.kategori} soru`);
    });

  } catch (error) {
    console.error('‚ùå Soru y√ºkleme hatasƒ±:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main(); 